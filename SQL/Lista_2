1.	CREATE DATABASE `db-aparaty`;
	CREATE USER '268449'@'localhost';
	SET PASSWORD FOR '268449'@'localhost' = PASSWORD('adrian449');
	GRANT SELECT ON `db-aparaty`.* TO '268449'@'localhost';
	GRANT INSERT ON `db-aparaty`.* TO '268449'@'localhost';
	GRANT UPDATE ON `db-aparaty`.* TO '268449'@'localhost';
	
	
	
2.	CREATE TABLE Matryca (ID int, przekatna decimal(4,2) CHECK(przekatna > 0), rozdzielczosc decimal(3,1) CHECK(rozdzielczosc > 0), typ varchar(10), PRIMARY KEY(ID));
	ALTER TABLE Matryca AUTO_INCREMENT = 100;

	CREATE TABLE Obiektyw (ID int, model varchar(30), minPrzeslona float, maxPrzeslona float CHECK(minPrzeslona < maxPrzeslona), PRIMARY KEY(ID));
	ALTER TABLE Obiektyw AUTO_INCREMENT = 0;

	CREATE TABLE Producent (ID int, nazwa varchar(50), kraj varchar(20), PRIMARY KEY (ID));
	ALTER TABLE Producent AUTO_INCREMENT = 0;
	
	CREATE TABLE Aparat (model varchar(30), producent int, matryca int, obiektyw int, typ ENUM('kompaktowy', 'lustrzanka', 'profesjonalny', 'inny'), PRIMARY KEY(model), FOREIGN KEY(producent) REFERENCES Producent(ID), FOREIGN KEY(matryca) REFERENCES Matryca(ID), FOREIGN KEY(obiektyw) REFERENCES Obiektyw(ID));



3.	INSERT INTO Matryca VALUES('100', '23.0', '16.0', 'aps-h');
	INSERT INTO Producent VALUES('0', 'Nicon', 'Chiny');
	INSERT INTO Obiektyw VALUES('0', 'RF', '22', '24');
	INSERT INTO Aparat VALUES('Apratkon1', '0', '100', '0', 'kompaktowy');
	
	
	
4.
DELIMITER $$
CREATE OR REPLACE PROCEDURE TworzAparaty()
BEGIN
	DECLARE maxMatrycaID INT DEFAULT (SELECT MAX(ID) FROM Matryca);
	DECLARE minMatrycaID INT DEFAULT (SELECT MIN(ID) FROM Matryca);
	DECLARE maxProducentID INT DEFAULT (SELECT MAX(ID) FROM Producent);
	DECLARE minProducentID INT DEFAULT (SELECT MIN(ID) FROM Producent);
	DECLARE maxObiektywID INT DEFAULT (SELECT MAX(ID) FORM Obiektyw);
	DECLARE minObiektywID INT DEFAULT (SELECT MIN(ID) FORM Obiektyw);
	
	DECLARE m INT;
	DECLARE p INT;
	DECLARE o INT
	DECLARE t INT;
	DECLARE typ_los varchar(14);

	DECLARE i INT DEFAULT 0;
	
	WHILE i < 100 DO
		SET m = (minMatrycaID + FLOOR(RAND() * (maxMatrycaID - minMatrycaID + 1)));
		SET p = (minProducentID + FLOOR(RAND() * (maxProducentID - minProducentID + 1)));
		SET o = (minObiektywID + FLOOR(RAND() * (maxObiektywID - minObiektywID + 1)));
		SET t = (FLOOR(RAND() * (4)));	
		
		IF t = 0 THEN
			SET typ_los = 'kompaktowy';
		ELSEIF t = 1 THEN
			SET typ_los = 'lustrzanka';
		ELSEIF t = 2 THEN
			SET typ_los = 'profesjonalny';
		ELSE
			SET typ_los = 'inny';
		END IF;
		
		INSERT INTO Aparat (model, producent, matryca, obiektyw, typ) VALUES(CONCAT('Aparat nr', i), p, m, o, typ_los);
		
		SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

CALL TworzAparaty();

Żaden model się nie powtarza oraz użytkownik z 1 zadania nie może wywołać procedury



5.
DELIMITER $$
CREATE FUNCTION IF NOT EXISTS maxMatryca(ID_dana int) RETURNS varchar(50)
BEGIN
	DECLARE wynik varchar(50);
	
	SELECT model INTO wynik FROM Aparat JOIN Matryca on Matryca.ID = Aparat.matryca WHERE producent = ID_dana ORDER BY przekatna DESC LIMIT 1;
	
	RETURN wynik;
END$$
DELIMITER ;



6.
DELIMITER $$
CREATE OR REPLACE TRIGGER NowyProducent BEFORE INSERT ON Aparat
FOR EACH ROW
BEGIN
	IF (SELECT COUNT(*) FROM Producent WHERE ID = NEW.producent) = 0 THEN
		INSERT INTO Producent (ID, nazwa, kraj) VALUES(NEW.producent, NULL, NULL);
	END IF;
END$$
DELIMITER;



7.
DELIMITER $$
CREATE FUNCTION IF NOT EXISTS IleAparatowMatryca(dana INT) RETURNS INT
BEGIN
	DECLARE wynik INT;
	SET wynik = (SELECT COUNT(*) FROM Aparat WHERE matryca = dana);
	REURN wynik; 
END$$
DELIMITER ;



8.
DELIMITER $$
CREATE OR REPLACE TRIGGER UsunMatryca AFTER DELETE ON Aparat
FOR EACH ROW
BEGIN
	DELETE FROM Matryca WHERE Matryca.ID = OLD.matryca AND Matryca.ID NOT IN (SELECT matryca FROM Aparat);
END$$
DELIMITER;



9.
CREATE VIEW IF NOT EXISTS AparatyNieZChin AS
(SELECT DISTINCT Aparat.model, Producent.nazwa, Matryca.przekatna, Matryca.rozdzielczosc, Obiektyw.minPrzeslona, Obiektyw.maxPrzeslona FROM Aparat JOIN Producent ON Producent.ID = Aparat.producent JOIN Matryca ON Matryca.ID = Aparat.matryca JOIN Obiektyw ON Obiektyw.ID = Aparat.obiektyw WHERE Producent.kraj <> 'Chiny' AND Aparat.typ = 'lustrzanka');

Nie, zadania nie może wykonać użytkownik z zadania 1



10.
CREATE VIEW IF NOT EXISTS AparatyProducenci AS
(SELECT nazwa, kraj, model FROM Aparat JOIN Producent ON Aparat.producent = Producent.ID);

DELETE FROM Aparaty WHERE producent IN (SELECT ID FROM Producent WHERE nazwa = 'Chiny');

Tak, widok się zmienił, nie ma na nim już usuniętych aparatów

11.










